import React, { useState } from 'react';
import { RecaptchaVerifier, signInWithPhoneNumber } from "firebase/auth";
import { toast, Toaster } from "react-hot-toast";
import OtpInput from "otp-input-react";
import { CgSpinner } from "react-icons/cg";
import { BsFillShieldLockFill, BsTelephoneFill } from "react-icons/bs";
import { Link, useNavigate } from "react-router-dom";
import PhoneInput from "react-phone-input-2";
import { auth } from "./firebase";
import "react-phone-input-2/lib/style.css";
import logo12 from './images/logo12.png'

function SignUp() {


    const history = useNavigate();
    const [otp, setOtp] = useState("");
    const [ph, setPh] = useState('');
    const [password, setPassword] = useState('');
    const [loading, setLoading] = useState(false);
    const [showOTP, setShowOTP] = useState(false);
    const [user, setUser] = useState(null);


    window.recaptchaVerifier = new RecaptchaVerifier(auth, 'signinbot', {
      'size': 'invisible',
      'callback': (response) => {
        // reCAPTCHA solved, allow signInWithPhoneNumber.
        signInWithPhoneNumber();
      }
    });

    const appVerifier = window.recaptchaVerifier;

    
   signInWithPhoneNumber(auth, ph, appVerifier)
    .then((confirmationResult) => {
      // SMS sent. Prompt user to type the code from the message, then sign the
      // user in with confirmationResult.confirm(code).
      window.confirmationResult = confirmationResult;
      // ...
      

    }).catch((error) => {
      // Error; SMS not sent
      
      // ...
    });

    
    confirmationResult.confirm(otp).then((result) => {
      // User signed in successfully.
      const user = result.user;
    }).catch((error) => {
      // User couldn't sign in (bad verification code?)
      // ...
    });
 
   
    
    // function onCaptchVerify() {
    //     if (!window.recaptchaVerifier) {
    //       window.recaptchaVerifier = new RecaptchaVerifier(
    //         "recaptcha-container",
    //         {
    //           size: "invisible",
    //           callback: (response) => {
    //             onSignup();
    //           },
    //           "expired-callback": () => {},
    //         },
    //         auth
    //       );
    //     }
    //   }


    // function onSignup() {
    //     setLoading(true);
    //     onCaptchVerify();
    
    //     const appVerifier = window.recaptchaVerifier;
    
    //     const formatPh = "+" + ph;
    
    //     signInWithPhoneNumber(auth, formatPh, appVerifier)
    //       .then((confirmationResult) => {
    //         window.confirmationResult = confirmationResult;
    //         setLoading(false);
    //         setShowOTP(true);
    //         toast.success("OTP sended successfully!");
    //       })
    //       .catch((error) => {
    //         console.log(error);
    //         setLoading(false);
    //       });
    //   }
    

      // function onOTPVerify() {
      //   setLoading(true);
      //   window.confirmationResult
      //     .confirm(otp)
      //     .then(async (res) => {
      //       console.log(res);
      //       setUser(res.user);
      //       setLoading(false);
      //     })
      //     .catch((err) => {
      //       console.log(err);
      //       setLoading(false);
      //     });
      // } 


    // const signIn = e => {
    //     e.preventDefault();

    //     auth
    //         .signInWithPhoneNumber(phone, password)
    //         .then(auth => {
    //             history.push('/')
    //         })
    //         .catch(error => alert(error.message))
    // }
    // const register = e => {
    //     e.preventDefault();

    //     auth
    //         .createUserWithPhoneAndPassword(phone, password)
    //         .then((auth) => {
    //             // it successfully created a new user with email and password
    //             if (auth) {
    //                 history.push('/')
    //             }
    //         })
    //         .catch(error => alert(error.message))
    // }

    return (
      
    <section className="bg-emerald-500 flex items-center justify-center h-screen">
      <div>
        <Toaster toastOptions={{ duration: 4000 }} />
        <div id="recaptcha-container"></div>
        {user ? (
          <h2 className="text-center text-white font-medium text-2xl">
            üëçLogin Success
          </h2>
        ) : (
          <div className="w-80 flex flex-col gap-4 rounded-lg p-4">
            <h1 className="text-center leading-normal text-white font-medium text-3xl mb-6">
              Welcome to <br /> CODE A PROGRAM
            </h1>
            {showOTP ? (
              <>
                <div className="bg-white text-emerald-500 w-fit mx-auto p-4 rounded-full">
                <BsFillShieldLockFill size={30} />
                </div>
                <label
                  htmlFor="otp"
                  className="font-bold text-xl text-white text-center"
                >
                  Enter your OTP
                </label>
                <OtpInput
                  value={otp}
                  onChange={setOtp}
                  OTPLength={6}
                  otpType="number"
                  disabled={false}
                  autoFocus
                  className="opt-container "
                ></OtpInput>
                <button
                
                  className="bg-emerald-600 w-full flex gap-1 items-center justify-center py-2.5 text-white rounded"
                >
                  {loading && (
                    <CgSpinner size={20} className="mt-1 animate-spin" />
                  )}
                  <span>Verify OTP</span>
                </button>
              </>
            ) : (
              <>
                <div className="bg-white text-emerald-500 w-fit mx-auto p-4 rounded-full">
                  <BsTelephoneFill size={30} />
                </div>
                <label    htmlFor="" className="font-bold text-xl text-white text-center" >
                  Verify your phone number
                </label>
                <PhoneInput country={"lb"} value={ph} onChange={setPh} />
                <button id="signinbot"
                   className="bg-emerald-600 w-full flex gap-1 items-center justify-center py-2.5 text-white rounded"
                >
                  {loading && (
                    <CgSpinner size={20} className="mt-1 animate-spin" />
                  )}
                  <span>Send code via SMS</span>
                </button>
              </>
            )}
          </div>
        )}
      </div>
    </section>
  );
};


export default SignUp 